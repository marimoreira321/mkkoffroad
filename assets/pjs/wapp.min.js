(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var data = {
    users: Array,
    curr_user: {
        idx: ""
    },
    url: 'api/testwapp',
    exec: '',
    network: Array
};

var getter = new Vue({
    el: '#data-getter',
    data: data,

    methods: {
        getUsers: function getUsers() {
            this.exec = '?exec=get_users';

            $.get(this.url + this.exec).then(function (r) {
                data.users = r;
                data.curr_user.idx = 0;
                data.curr_user.user_id = r[0].user_id;
                getter.getUser(data.curr_user.user_id, 0);
            });
        },

        getUser: function getUser(u_id, idx) {
            this.exec = '?exec=get_user&user_id=' + u_id;

            $.get(this.url + this.exec).then(function (r) {
                data.curr_user = r[0];
                data.curr_user.idx = idx;

                getter.getUserNetwork(r[0].user_id);
            });
        },
        getUserNetwork: function getUserNetwork(u_id) {
            this.exec = '?exec=get_user_network&user_id=' + u_id;

            $.get(this.url + this.exec).then(function (r) {

                data.network = r;
            });
        },
        getUserBalance: function getUserBalance(u_id, idx) {
            this.exec = '?exec=get_user_balance&user_id=' + u_id;

            $.get(this.url + this.exec).then(function (r) {
                data.users[idx].balance = r.balance;
            });
        }
    },

    created: function created() {
        this.getUsers();
    }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvd2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBSSxPQUFPO0FBQ1AsV0FBTyxLQURBO0FBRVAsZUFBVTtBQUNOLGFBQUs7QUFEQyxLQUZIO0FBS1AsU0FBSyxjQUxFO0FBTVAsVUFBTSxFQU5DO0FBT1AsYUFBUztBQVBGLENBQVg7O0FBVUEsSUFBSSxTQUFTLElBQUksR0FBSixDQUFRO0FBQ2pCLFFBQUksY0FEYTtBQUVqQixVQUFNLElBRlc7O0FBSWpCLGFBQVM7QUFDTCxrQkFBVSxvQkFDVjtBQUNJLGlCQUFLLElBQUwsR0FBWSxpQkFBWjs7QUFFQSxjQUFFLEdBQUYsQ0FBTSxLQUFLLEdBQUwsR0FBUyxLQUFLLElBQXBCLEVBQTBCLElBQTFCLENBQStCLFVBQVMsQ0FBVCxFQUFXO0FBQ3RDLHFCQUFLLEtBQUwsR0FBYSxDQUFiO0FBQ0EscUJBQUssU0FBTCxDQUFlLEdBQWYsR0FBcUIsQ0FBckI7QUFDQSxxQkFBSyxTQUFMLENBQWUsT0FBZixHQUF5QixFQUFFLENBQUYsRUFBSyxPQUE5QjtBQUNBLHVCQUFPLE9BQVAsQ0FBZSxLQUFLLFNBQUwsQ0FBZSxPQUE5QixFQUF1QyxDQUF2QztBQUNILGFBTEQ7QUFPSCxTQVpJOztBQWNMLGlCQUFTLGlCQUFTLElBQVQsRUFBZSxHQUFmLEVBQ1Q7QUFDSSxpQkFBSyxJQUFMLEdBQVksNEJBQTBCLElBQXRDOztBQUVBLGNBQUUsR0FBRixDQUFNLEtBQUssR0FBTCxHQUFTLEtBQUssSUFBcEIsRUFBMEIsSUFBMUIsQ0FBK0IsVUFBUyxDQUFULEVBQVc7QUFDdEMscUJBQUssU0FBTCxHQUFpQixFQUFFLENBQUYsQ0FBakI7QUFDQSxxQkFBSyxTQUFMLENBQWUsR0FBZixHQUFxQixHQUFyQjs7QUFFQSx1QkFBTyxjQUFQLENBQXNCLEVBQUUsQ0FBRixFQUFLLE9BQTNCO0FBRUgsYUFORDtBQU9ILFNBekJJO0FBMEJMLHdCQUFnQix3QkFBUyxJQUFULEVBQ2hCO0FBQ0ksaUJBQUssSUFBTCxHQUFZLG9DQUFrQyxJQUE5Qzs7QUFFQSxjQUFFLEdBQUYsQ0FBTSxLQUFLLEdBQUwsR0FBUyxLQUFLLElBQXBCLEVBQTBCLElBQTFCLENBQStCLFVBQVMsQ0FBVCxFQUFXOztBQUVsQyxxQkFBSyxPQUFMLEdBQWUsQ0FBZjtBQUNQLGFBSEQ7QUFJSCxTQWxDSTtBQW1DTCx3QkFBZ0Isd0JBQVMsSUFBVCxFQUFlLEdBQWYsRUFDaEI7QUFDSSxpQkFBSyxJQUFMLEdBQVksb0NBQWtDLElBQTlDOztBQUVBLGNBQUUsR0FBRixDQUFNLEtBQUssR0FBTCxHQUFTLEtBQUssSUFBcEIsRUFBMEIsSUFBMUIsQ0FBK0IsVUFBUyxDQUFULEVBQVc7QUFDdEMscUJBQUssS0FBTCxDQUFXLEdBQVgsRUFBZ0IsT0FBaEIsR0FBMEIsRUFBRSxPQUE1QjtBQUNILGFBRkQ7QUFHSDtBQTFDSSxLQUpROztBQWlEakIsYUFBUyxtQkFBVTtBQUNmLGFBQUssUUFBTDtBQUNIO0FBbkRnQixDQUFSLENBQWIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJsZXQgZGF0YSA9IHtcbiAgICB1c2VyczogQXJyYXksXG4gICAgY3Vycl91c2VyOntcbiAgICAgICAgaWR4OiBcIlwiLFxuICAgIH0sXG4gICAgdXJsOiAnYXBpL3Rlc3R3YXBwJyxcbiAgICBleGVjOiAnJyxcbiAgICBuZXR3b3JrOiBBcnJheVxufVxuXG52YXIgZ2V0dGVyID0gbmV3IFZ1ZSh7XG4gICAgZWw6ICcjZGF0YS1nZXR0ZXInLFxuICAgIGRhdGE6IGRhdGEsXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldFVzZXJzOiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZXhlYyA9ICc/ZXhlYz1nZXRfdXNlcnMnO1xuXG4gICAgICAgICAgICAkLmdldCh0aGlzLnVybCt0aGlzLmV4ZWMpLnRoZW4oZnVuY3Rpb24ocil7XG4gICAgICAgICAgICAgICAgZGF0YS51c2VycyA9IHI7ICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGF0YS5jdXJyX3VzZXIuaWR4ID0gMDtcbiAgICAgICAgICAgICAgICBkYXRhLmN1cnJfdXNlci51c2VyX2lkID0gclswXS51c2VyX2lkO1xuICAgICAgICAgICAgICAgIGdldHRlci5nZXRVc2VyKGRhdGEuY3Vycl91c2VyLnVzZXJfaWQsIDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRVc2VyOiBmdW5jdGlvbih1X2lkLCBpZHgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZXhlYyA9ICc/ZXhlYz1nZXRfdXNlciZ1c2VyX2lkPScrdV9pZDtcblxuICAgICAgICAgICAgJC5nZXQodGhpcy51cmwrdGhpcy5leGVjKS50aGVuKGZ1bmN0aW9uKHIpe1xuICAgICAgICAgICAgICAgIGRhdGEuY3Vycl91c2VyID0gclswXTtcbiAgICAgICAgICAgICAgICBkYXRhLmN1cnJfdXNlci5pZHggPSBpZHg7XG5cbiAgICAgICAgICAgICAgICBnZXR0ZXIuZ2V0VXNlck5ldHdvcmsoclswXS51c2VyX2lkKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFVzZXJOZXR3b3JrOiBmdW5jdGlvbih1X2lkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmV4ZWMgPSAnP2V4ZWM9Z2V0X3VzZXJfbmV0d29yayZ1c2VyX2lkPScrdV9pZDtcblxuICAgICAgICAgICAgJC5nZXQodGhpcy51cmwrdGhpcy5leGVjKS50aGVuKGZ1bmN0aW9uKHIpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5ldHdvcmsgPSByO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFVzZXJCYWxhbmNlOiBmdW5jdGlvbih1X2lkLCBpZHgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZXhlYyA9ICc/ZXhlYz1nZXRfdXNlcl9iYWxhbmNlJnVzZXJfaWQ9Jyt1X2lkO1xuXG4gICAgICAgICAgICAkLmdldCh0aGlzLnVybCt0aGlzLmV4ZWMpLnRoZW4oZnVuY3Rpb24ocil7XG4gICAgICAgICAgICAgICAgZGF0YS51c2Vyc1tpZHhdLmJhbGFuY2UgPSByLmJhbGFuY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjcmVhdGVkOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmdldFVzZXJzKCk7XG4gICAgfVxufSlcblxuXG5cbiJdfQ==
