(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var data = {};

new Vue({
    el: "#vueExample",
    data: data,

    methods: {
        callSuccess: function callSuccess() {
            return simpleAlert.show({
                message: 'Este é o alerta de Sucesso!',
                type: 'success'
            });
        },
        callWarning: function callWarning() {
            return simpleAlert.show({
                message: 'Este é o alerta de Aviso!',
                type: 'warn'
            });
        },
        callDanger: function callDanger() {
            return simpleAlert.show({
                message: 'Este é o alerta de Erro!',
                type: 'danger'
            });
        }
    }
});

new Vue({
    el: '#customAlert',
    data: {
        options: {
            message: 'Este é um alerta customizado!',
            type: 'bg-grey',
            icon: 'fa-angry',
            fontColor: 't-black',
            dismissable: false,
            ttl: 5000,
            gloss: {
                in: 'cubic-bezier(.54,.3,.39,1.58)',
                out: 'ease-out'
            }
        }
    },

    methods: {
        callCustomBtn: function callCustomBtn() {
            return simpleAlert.show(this.options);
        },
        resize: function resize(event) {
            console.log(event.target);
            var w = event.target.value.length * 9;
            $(event.target).css('width', w);
            console.log(w);
        }
    }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvY29tcG9uZW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBSSxPQUFPLEVBQVg7O0FBSUEsSUFBSSxHQUFKLENBQVE7QUFDSixRQUFJLGFBREE7QUFFSixVQUFNLElBRkY7O0FBSUosYUFBUztBQUNMLHFCQUFhLHVCQUFVO0FBQ25CLG1CQUFPLFlBQVksSUFBWixDQUFpQjtBQUNwQix5QkFBUyw2QkFEVztBQUVwQixzQkFBTTtBQUZjLGFBQWpCLENBQVA7QUFJSCxTQU5JO0FBT0wscUJBQWEsdUJBQVU7QUFDbkIsbUJBQU8sWUFBWSxJQUFaLENBQWlCO0FBQ3BCLHlCQUFTLDJCQURXO0FBRXBCLHNCQUFNO0FBRmMsYUFBakIsQ0FBUDtBQUlILFNBWkk7QUFhTCxvQkFBWSxzQkFBVTtBQUNsQixtQkFBTyxZQUFZLElBQVosQ0FBaUI7QUFDcEIseUJBQVMsMEJBRFc7QUFFcEIsc0JBQU07QUFGYyxhQUFqQixDQUFQO0FBSUg7QUFsQkk7QUFKTCxDQUFSOztBQTBCQSxJQUFJLEdBQUosQ0FBUTtBQUNKLFFBQUksY0FEQTtBQUVKLFVBQU07QUFDRixpQkFBUTtBQUNKLHFCQUFTLCtCQURMO0FBRUosa0JBQU0sU0FGRjtBQUdKLGtCQUFNLFVBSEY7QUFJSix1QkFBVyxTQUpQO0FBS0oseUJBQWEsS0FMVDtBQU1KLGlCQUFLLElBTkQ7QUFPSixtQkFBTztBQUNILG9CQUFJLCtCQUREO0FBRUgscUJBQUs7QUFGRjtBQVBIO0FBRE4sS0FGRjs7QUFpQkosYUFBUztBQUNMLHVCQUFlLHlCQUFVO0FBQ3JCLG1CQUFPLFlBQVksSUFBWixDQUFpQixLQUFLLE9BQXRCLENBQVA7QUFDSCxTQUhJO0FBSUwsZ0JBQVEsZ0JBQVMsS0FBVCxFQUFlO0FBQ25CLG9CQUFRLEdBQVIsQ0FBWSxNQUFNLE1BQWxCO0FBQ0EsZ0JBQUksSUFBSSxNQUFNLE1BQU4sQ0FBYSxLQUFiLENBQW1CLE1BQW5CLEdBQTBCLENBQWxDO0FBQ0EsY0FBRSxNQUFNLE1BQVIsRUFBZ0IsR0FBaEIsQ0FBb0IsT0FBcEIsRUFBNkIsQ0FBN0I7QUFDQSxvQkFBUSxHQUFSLENBQVksQ0FBWjtBQUNIO0FBVEk7QUFqQkwsQ0FBUiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsInZhciBkYXRhID0ge1xuXG59XG5cbm5ldyBWdWUoe1xuICAgIGVsOiBcIiN2dWVFeGFtcGxlXCIsXG4gICAgZGF0YTogZGF0YSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2FsbFN1Y2Nlc3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gc2ltcGxlQWxlcnQuc2hvdyh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0VzdGUgw6kgbyBhbGVydGEgZGUgU3VjZXNzbyEnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxXYXJuaW5nOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHNpbXBsZUFsZXJ0LnNob3coe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFc3RlIMOpIG8gYWxlcnRhIGRlIEF2aXNvIScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbERhbmdlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBzaW1wbGVBbGVydC5zaG93KHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXN0ZSDDqSBvIGFsZXJ0YSBkZSBFcnJvIScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm5ldyBWdWUoe1xuICAgIGVsOiAnI2N1c3RvbUFsZXJ0JyxcbiAgICBkYXRhOiB7XG4gICAgICAgIG9wdGlvbnM6e1xuICAgICAgICAgICAgbWVzc2FnZTogJ0VzdGUgw6kgdW0gYWxlcnRhIGN1c3RvbWl6YWRvIScsIFxuICAgICAgICAgICAgdHlwZTogJ2JnLWdyZXknLCBcbiAgICAgICAgICAgIGljb246ICdmYS1hbmdyeScsXG4gICAgICAgICAgICBmb250Q29sb3I6ICd0LWJsYWNrJyxcbiAgICAgICAgICAgIGRpc21pc3NhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHR0bDogNTAwMCxcbiAgICAgICAgICAgIGdsb3NzOiB7XG4gICAgICAgICAgICAgICAgaW46ICdjdWJpYy1iZXppZXIoLjU0LC4zLC4zOSwxLjU4KScsXG4gICAgICAgICAgICAgICAgb3V0OiAnZWFzZS1vdXQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjYWxsQ3VzdG9tQnRuOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHNpbXBsZUFsZXJ0LnNob3codGhpcy5vcHRpb25zKVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgdyA9IGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGgqOTtcbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5jc3MoJ3dpZHRoJywgdyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh3KTtcbiAgICAgICAgfSxcbiAgICB9LFxufSk7Il19
